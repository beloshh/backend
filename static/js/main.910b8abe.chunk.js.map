{"version":3,"sources":["components/Paginate.jsx","components/Bulma.jsx","components/Users.jsx","js/Paginator.js","serviceWorker.js","index.js"],"names":["Paginate","props","itemsCount","currentPage","pageSize","onPageChange","pagesCount","Math","ceil","pages","_","range","className","role","aria-label","map","page","key","onClick","Bulma","id","src","alt","name","email","catchPhrase","axios","interceptors","response","use","error","status","console","log","alert","Promise","reject","Users","useState","users","setUsers","setcurrentPage","useEffect","a","async","result","data","getUsers","allUsers","items","pageNumber","startIndex","slice","take","value","Paginator","user","company","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OA6CeA,MAzCf,SAAkBC,GAAQ,IAChBC,EAAoDD,EAApDC,WAAYC,EAAwCF,EAAxCE,YAAaC,EAA2BH,EAA3BG,SAAUC,EAAiBJ,EAAjBI,aAErCC,EAAaC,KAAKC,KAAKN,EAAaE,GAC1C,GAAmB,IAAfE,EAAkB,OAAO,KAC7B,IAAMG,EAAQC,IAAEC,MAAM,EAAGL,EAAa,GAEtC,OACE,6BACE,yBACEM,UAAU,wBACVC,KAAK,aACLC,aAAW,cAEX,wBAAIF,UAAU,mBACXH,EAAMM,KAAI,SAACC,GAAD,OACT,wBAAIC,IAAKD,GACP,uBACEJ,UACEI,IAASb,EACL,6BACA,kBAENW,aAAW,cACXI,QAAS,kBAAMb,EAAaW,KAE3BA,W,MCKFG,MAhCf,SAAelB,GACb,OACE,yBAAKmB,GAAG,SACN,yBAAKR,UAAU,qBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,OACb,6BAASA,UAAU,SACjB,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACES,IAAI,8CACJC,IAAI,oBAIV,yBAAKV,UAAU,iBACb,yBAAKA,UAAU,WACb,2BACE,gCAASX,EAAMsB,MADjB,IACgC,6BAAO,IACrC,+BAAQtB,EAAMuB,OAFhB,IAE+B,6BAC7B,6BAHF,IAGUvB,EAAMwB,qB,sBChBlCC,IAAMC,aAAaC,SAASC,IAAI,MAAM,SAACC,GAYrC,OAVEA,EAAMF,UACNE,EAAMF,SAASG,QAAU,KACzBD,EAAMF,SAASG,OAAS,MAGxBC,QAAQC,IAAI,qBACZC,MACE,oFAGGC,QAAQC,OAAON,MA+CTO,MA5Cf,SAAepC,GAAQ,IAAD,EACMqC,mBAAS,IADf,mBACbC,EADa,KACNC,EADM,OAEkBF,mBAAS,GAF3B,mBAEbnC,EAFa,KAEAsC,EAFA,KAKpBC,qBAAU,YACR,mBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACuBjB,IAAM,+CAD7B,OACQmB,EADR,OAEEL,EAASK,EAAOC,MAFlB,qCAKAC,MAOF,IAAMC,ECtCD,SAAoBC,EAAOC,EAAY9C,GAC1C,IAAM+C,GAAcD,EAAa,GAAK9C,EACtC,OAAOM,IAAEuC,GAAOG,MAAMD,GAAYE,KAAKjD,GAAUkD,QDoClCC,CAAUhB,EAAOpC,EAfjB,GAgBjB,OACE,6BACE,4BACG6C,EAASjC,KAAI,SAACyC,GAAD,OACZ,kBAAC,EAAD,CACEvC,IAAKuC,EAAKpC,GACVG,KAAMiC,EAAKjC,KACXH,GAAIoC,EAAKpC,GACTI,MAAOgC,EAAKhC,MACZC,YAAa+B,EAAKC,QAAQhC,kBAIhC,yBAAKL,GAAG,QACN,kBAAC,EAAD,CACElB,WAAYqC,EAAMmB,OAClBvD,YAAaA,EACbC,SAjCS,EAkCTC,aAvBR,SAA0BW,GACxByB,EAAezB,SEzBC2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SD8H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.910b8abe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport _ from \"lodash\";\r\n\r\nfunction Paginate(props) {\r\n  const { itemsCount, currentPage, pageSize, onPageChange } = props;\r\n\r\n  const pagesCount = Math.ceil(itemsCount / pageSize);\r\n  if (pagesCount === 1) return null;\r\n  const pages = _.range(1, pagesCount + 1);\r\n\r\n  return (\r\n    <div>\r\n      <nav\r\n        className=\"pagination is-rounded\"\r\n        role=\"navigation\"\r\n        aria-label=\"pagination\"\r\n      >\r\n        <ul className=\"pagination-list\">\r\n          {pages.map((page) => (\r\n            <li key={page}>\r\n              <a\r\n                className={\r\n                  page === currentPage\r\n                    ? \"pagination-link is-current\"\r\n                    : \"pagination-link\"\r\n                }\r\n                aria-label=\"Goto page 1\"\r\n                onClick={() => onPageChange(page)}\r\n              >\r\n                {page}\r\n              </a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\nPaginate.propTypes = {\r\n  itemsCount: PropTypes.number.isRequired,\r\n  pageSize: PropTypes.number.isRequired,\r\n  currentPage: PropTypes.number.isRequired,\r\n  onPageChange: PropTypes.func.isRequired,\r\n};\r\nexport default Paginate;\r\n","import React from \"react\";\r\nimport \"react-bulma-components/dist/react-bulma-components.min.css\";\r\n\r\nfunction Bulma(props) {\r\n  return (\r\n    <div id=\"first\">\r\n      <div className=\"columns is-tablet\">\r\n        <div className=\"column is-half\">\r\n          <div className=\"box\">\r\n            <article className=\"media\">\r\n              <div className=\"media-left\">\r\n                <figure className=\"image is-64x64\">\r\n                  <img\r\n                    src=\"https://source.unsplash.com/random/1280x960\"\r\n                    alt=\" random image\"\r\n                  />\r\n                </figure>\r\n              </div>\r\n              <div className=\"media-content\">\r\n                <div className=\"content\">\r\n                  <p>\r\n                    <strong>{props.name}</strong> <br />{\" \"}\r\n                    <small>{props.email}</small> <br />\r\n                    <br /> {props.catchPhrase}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </article>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Bulma;\r\n","import React, { useEffect, useState } from \"react\";\nimport Paginate from \"./Paginate\";\nimport Bulma from \"./Bulma\";\nimport axios from \"axios\";\nimport \"../style/bulma.css\";\nimport { Paginator } from \"../js/Paginator\";\n\naxios.interceptors.response.use(null, (error) => {\n  const expectedError =\n    error.response &&\n    error.response.status >= 400 &&\n    error.response.status < 500;\n\n  if (!expectedError) {\n    console.log(\"logging the error\");\n    alert(\n      \"an unexpected error occured. The server or your internet connection may be down\"\n    );\n  }\n  return Promise.reject(error);\n});\n\nfunction Users(props) {\n  const [users, setUsers] = useState([]);\n  const [currentPage, setcurrentPage] = useState(1);\n  const pageSize = 4;\n\n  useEffect(() => {\n    async function getUsers() {\n      const result = await axios(\"https://jsonplaceholder.typicode.com/users\");\n      setUsers(result.data);\n    }\n\n    getUsers();\n  });\n\n  function handlePageChange(page) {\n    setcurrentPage(page);\n  }\n\n  const allUsers = Paginator(users, currentPage, pageSize);\n  return (\n    <div>\n      <ul>\n        {allUsers.map((user) => (\n          <Bulma\n            key={user.id}\n            name={user.name}\n            id={user.id}\n            email={user.email}\n            catchPhrase={user.company.catchPhrase}\n          />\n        ))}\n      </ul>\n      <div id=\"long\">\n        <Paginate\n          itemsCount={users.length}\n          currentPage={currentPage}\n          pageSize={pageSize}\n          onPageChange={handlePageChange}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Users;\n","import _ from \"lodash\"\r\n\r\nexport function Paginator (items, pageNumber, pageSize ) {\r\n    const startIndex = (pageNumber - 1) * pageSize;\r\n    return _(items).slice(startIndex).take(pageSize).value();\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Bulma from \"./components/Users\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Bulma />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}